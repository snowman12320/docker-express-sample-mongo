# 例如，如果要推送名為 v1.0 的標籤，命令為：
# git push origin v1.0
# 推送所有標籤，一次性推送所有本地標籤，可以使用：
# git push origin --tags

# x
# tags更新後，更新Docker Hub，雲端主機也更新：
# 停止所有運行中的容器：使用 docker stop 命令，搭配 docker ps -q 來獲取所有運行中容器的 ID：
# docker stop $(docker ps -q)
# docker container prune -f
#  y
#  docker compose up -d

# x
# 要確保使用最新的映像，您可以採取以下方法：
# 使用 --pull 標誌：在執行 docker-compose up 時，新增 --pull 標誌，這將強制 Docker Compose 嘗試拉取最新版本的所有映像：
# docker-compose up -d --pull

# o
# docker-compose pull
# docker-compose up -d

name: Build and Push Docker Image and Upate Cloud Server

# 當推送符合 'v*' 模式的標籤時觸發此工作流程
on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ubuntu-latest # 使用最新的 Ubuntu 作業系統運行此工作流程

    steps:
      - name: Checkout repository # 儲存庫程式碼
        uses: actions/checkout@v2

      - name: Set up Docker Buildx # 設置 Docker Buildx 環境
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub # 登入 Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }} # 使用儲存在 Secrets 中的 Docker Hub 使用者名稱
          password: ${{ secrets.DOCKER_HUB_TOKEN }} # 使用儲存在 Secrets 中的 Docker Hub 訪問令牌

      - name: Build and push # 建置並推送 Docker image
        uses: docker/build-push-action@v3
        with:
          context: . # 設定建置上下文為當前目錄
          push: true # 在建置完成後推送映像到 Docker Hub
          platforms: linux/amd64,linux/arm64 # 目標平台為 AMD64 和 ARM64
          tags: | # 設定 Docker 映像的標籤 # /後方是儲存酷名稱
            ${{ secrets.DOCKER_HUB_USERNAME }}/docker-express-sample-mongo:latest
            ${{ secrets.DOCKER_HUB_USERNAME }}/docker-express-sample-mongo:${{ github.ref_name }}

      - name: Logout from DockerHub # 從 Docker Hub 登出
        run: docker logout

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Execute commands on remote server
        run: |
          ssh root@172.234.88.55 "cd docker-express-sample-mongo/ && docker-compose pull && docker-compose up -d"
